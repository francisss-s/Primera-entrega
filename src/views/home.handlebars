<div class="container my-5">
    <h1 class="text-center mb-4">{{title}}</h1>

    <!-- Selección de Carrito -->
    <div class="mb-4">
        <label for="cartSelect" class="form-label">Seleccione un Carrito:</label>
        <select id="cartSelect" class="form-select" required>
            <option value="">Seleccione un carrito...</option>
        </select>
    </div>

    <!-- Filtros y Opciones -->
    <div class="row mb-4">
        <div class="col-md-4">
            <label for="filterCategory" class="form-label">Filtrar por categoría:</label>
            <input type="text" id="filterCategory" class="form-control" placeholder="Ingrese una categoría">
        </div>
        <div class="col-md-2">
            <label for="sortOrder" class="form-label">Ordenar por precio:</label>
            <select id="sortOrder" class="form-select">
                <option value="">Seleccione...</option>
                <option value="asc">Ascendente</option>
                <option value="desc">Descendente</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="limit" class="form-label">Productos por página:</label>
            <input type="number" id="limit" class="form-control" value="10">
        </div>
        <div class="col-md-2">
            <label for="onlyAvailable" class="form-label">Solo disponibles:</label>
            <input type="checkbox" id="onlyAvailable" class="form-check-input">
        </div>
        <div class="col-md-2 text-center align-self-end">
            <button id="applyFilters" class="btn btn-primary mt-2">Aplicar Filtros</button>
        </div>
    </div>

    <!-- Tabla de productos -->
    <div class="table-responsive">
        <table class="table table-bordered table-striped">
            <thead class="table-primary">
                <tr>
                    <th>Título</th>
                    <th>Precio (USD)</th>
                    <th>Stock</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="productList">
                <!-- Los productos se cargarán aquí dinámicamente -->
            </tbody>
        </table>
    </div>

    <!-- Paginación -->
    <nav aria-label="Paginación de productos" class="text-center my-4">
        <ul class="pagination justify-content-center" id="pagination">
            <!-- Los botones de paginación se cargarán aquí -->
        </ul>
    </nav>

    <!-- Alerta de éxito -->
    <div id="successAlert" class="alert alert-success mt-4 text-center" style="display: none;">
        Producto agregado al carrito con éxito.
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        loadCarts();
        loadProducts(); // Cargar productos al inicio

        document.getElementById('applyFilters').addEventListener('click', () => {
            currentPage = 1; // Reiniciar a la primera página al aplicar filtros
            loadProducts();
        });
    });

    // Variables para la configuración de paginación y filtros
    let currentPage = 1;

    // Función para cargar productos con filtros y paginación
    async function loadProducts() {
        const category = document.getElementById('filterCategory').value;
        const sortOrder = document.getElementById('sortOrder').value;
        const limit = document.getElementById('limit').value || 10;
        const onlyAvailable = document.getElementById('onlyAvailable').checked ? 'available' : category;

        try {
            const response = await fetch(`/api/products?page=${currentPage}&limit=${limit}&sort=${sortOrder}&query=${onlyAvailable}`);
            const data = await response.json();

            const productList = document.getElementById('productList');
            productList.innerHTML = '';

            data.payload.forEach(product => {
                const row = document.createElement('tr');

                // Título
                const titleCell = document.createElement('td');
                titleCell.textContent = product.title;
                row.appendChild(titleCell);

                // Precio
                const priceCell = document.createElement('td');
                priceCell.textContent = `${product.price} USD`;
                row.appendChild(priceCell);

                // Stock
                const stockCell = document.createElement('td');
                stockCell.textContent = product.stock;
                row.appendChild(stockCell);

                // Acciones
                const actionsCell = document.createElement('td');

                // Botón para agregar al carrito
                const addButton = document.createElement('button');
                addButton.classList.add('btn', 'btn-success', 'me-2');
                addButton.textContent = 'Agregar al Carrito';
                addButton.setAttribute('data-product-id', product._id);
                addButton.onclick = () => addToCart(product._id);
                actionsCell.appendChild(addButton);

                // Botón para ver detalles
                const detailButton = document.createElement('a');
                detailButton.classList.add('btn', 'btn-info');
                detailButton.textContent = 'Ver Detalle';
                detailButton.href = `/products/${product._id}`;
                actionsCell.appendChild(detailButton);

                row.appendChild(actionsCell);

                productList.appendChild(row);
            });

            // Actualizar paginación
            renderPagination(data.totalPages, data.page);
        } catch (error) {
            console.error('Error al cargar productos:', error);
        }
    }

    // Función para renderizar la paginación
    function renderPagination(totalPages, currentPage) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const li = document.createElement('li');
            li.classList.add('page-item', i === currentPage ? 'active' : '');
            const link = document.createElement('a');
            link.classList.add('page-link');
            link.textContent = i;
            link.href = '#';
            link.onclick = (event) => {
                event.preventDefault();
                currentPage = i;
                loadProducts();
            };
            li.appendChild(link);
            pagination.appendChild(li);
        }
    }

    // Función para agregar un producto al carrito
    async function addToCart(productId) {
        const cartId = document.getElementById('cartSelect').value;

        if (!cartId) {
            alert('Por favor, seleccione un carrito antes de agregar productos.');
            return;
        }

        try {
            const response = await fetch(`/api/carts/${cartId}/product/${productId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity: 1 })
            });
            const data = await response.json();

            if (data.status === 'success') {
                const successAlert = document.getElementById('successAlert');
                successAlert.style.display = 'block';
                setTimeout(() => successAlert.style.display = 'none', 2000);
            } else {
                alert(`Error al agregar producto: ${data.message}`);
            }
        } catch (error) {
            console.error('Error al agregar producto al carrito:', error);
        }
    }

    // Función para cargar y mostrar carritos en el menú desplegable
    async function loadCarts() {
        try {
            const response = await fetch('/api/carts');
            const carts = await response.json();
            const cartSelect = document.getElementById('cartSelect');
            cartSelect.innerHTML = '<option value="">Seleccione un carrito...</option>';

            carts.forEach(cart => {
                const option = document.createElement('option');
                option.value = cart._id;
                option.textContent = `${cart.description} (ID: ${cart._id})`;
                cartSelect.appendChild(option);
            });
        } catch (error) {
            console.error('Error al cargar carritos:', error);
        }
    }
</script>
